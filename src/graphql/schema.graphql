schema {
  query: Query
  mutation: Mutation
}

directive @javaType(name: String!) on SCALAR

"Mutation root"
type Mutation {
  """
  user section
  """
  createUser(username: String!, password: String!): UserDto
  deleteUser(id: ID!): Void
  updateRole(id: ID!, roles: [UserRole]): UserDto
  """
  person section
  """
  updatePerson(input: PersonInput!): PersonDto
  """
  lecture section
  """
  updateLecture(input: LectureInput!): LectureInfoDto
  deleteLecture(id: ID!): Void
  """
  lectureHomeWork section
  """
  updateLectureHomeWork(input: LectureHomeWorkInput!): LectureHomeWorkInfoDto
  deleteLectureHomeWork(id: ID!): Void
  """
  training purchase section
  """
  updateTrainingPurchase(input: TrainingPurchaseInput!): TrainingPurchaseDto
  """
  training tariff
  """
  updateTrainingTariff(input: TrainingTariffInput!): TrainingTariffDto
  deleteTrainingTariff(id: ID!): Void
  """
  training section
  """
  updateTraining(input: TrainingInput!): TrainingDto
  deleteTraining(id: ID!): Void
  """
  training lecture
  """
  updateTrainingLecture(id: ID!, lectureIds: [ID!]): [TrainingLectureDto]
  """
  studentHomeWork section
  """
  takeForReview(homeWorkId: ID!): StudentHomeWorkDto
  approved(homeWorkId: ID!, resolution: String): StudentHomeWorkDto
  notApproved(homeWorkId: ID!, resolution: String): StudentHomeWorkDto
}

"Query root"
type Query {
  """
  user section
  """
  user: UserDto
  userRoles: [UserRoleDto]
  users(page: Int!, size: Int!, sort: UserSort): UsersDto
  """
  person section
  """
  person: PersonDto
  personByUserId(id: ID!): PersonDto
  """
  lecture section
  """
  lecture(id: ID): LectureInfoDto
  lectures(page: Int!, size: Int!, sort: LectureSort): LecturesDto
  """
  lectureHomeWork section
  """
  lectureHomeWork(id: ID): LectureHomeWorkInfoDto
  lectureHomeWorks(
    page: Int!
    size: Int!
    sort: HomeWorkSort
  ): LectureHomeWorksDto
  lectureHomeWorksByLectureId(lectureId: ID): [LectureHomeWorkDto]
  """
  purchase section
  """
  trainingPurchases: [TrainingPurchaseDto]
  trainingPurchasesByUserId(userId: ID!): [TrainingPurchaseDto]
  """
  training tariff
  """
  trainingTariffs(
    page: Int!
    size: Int!
    sort: TrainingTariffSort
  ): TrainingTariffsDto
  """
  training section
  """
  training(id: ID!): TrainingDto
  trainings(page: Int!, size: Int!, sort: TrainingSort): TrainingsDto
  """
  training lecture
  """
  trainingLectures(id: ID!): [TrainingLectureDto]
  """
  studentHomeWork section
  """
  studentHomeWork(id: ID): StudentHomeWorkDto
  studentHomeWorks(
    page: Int!
    size: Int!
    sort: StudentHomeWorkSort
  ): StudentHomeWorksDto
  studentHomeWorksByLectureHomeWorkId(
    page: Int!
    size: Int!
    sort: StudentHomeWorkSort
    homeWorkId: ID
  ): StudentHomeWorksDto
  studentHomeWorksByStatus(
    page: Int!
    size: Int!
    sort: StudentHomeWorkSort
    status: StudentHomeWorkStatus
  ): StudentHomeWorksDto
}

type TrainingPurchaseDto {
  id: ID
  user: UserInfoDto!
  training: TrainingDto!
  trainingTariff: TrainingTariffDto!
}

input TrainingPurchaseInput {
  id: ID
  userId: ID
  trainingId: ID
  trainingTariffId: ID
}

input TrainingTariffInput {
  id: ID
  name: String
  code: String
  description: String
}

type TrainingTariffDto {
  id: ID
  name: String
  code: String
  description: String
}

type TrainingDto {
  id: ID!
  name: String!
  content: String
  techStack: TechStack!
}

input TrainingInput {
  id: ID
  name: String
  content: String
  techStack: TechStack!
}

input TrainingLectureInput {
  lecture: ID!
  lastLecture: ID
  locking: Boolean
}

type TrainingLectureDto {
  id: ID
  number: Int
  lecture: LectureDto
  lastLecture: LectureDto
  locking: Boolean
}

input LectureInput {
  id: ID
  subject: String
  description: String
  content: String
  speakers: [String]
  lectureHomeWorks: [String]
}

type LectureInfoDto {
  id: ID
  subject: String
  description: String
  content: String
  speakers: [UserInfoDto]
  lectureHomeWorks: [LectureHomeWorkDto]
  creationDate: LocalDateTime
  modificationDate: LocalDateTime
}

type LectureDto {
  id: ID
  subject: String
  description: String
  speakers: [UserInfoDto]
  creationDate: LocalDateTime
  modificationDate: LocalDateTime
}

type LecturesDto {
  items: [LectureDto]
  totalElements: Long
  totalPages: Int
}

input LectureHomeWorkInput {
  id: ID
  subject: String
  description: String
  content: String
}

type LectureHomeWorkInfoDto {
  id: ID
  subject: String
  description: String
  content: String
  creationDate: LocalDateTime
  modificationDate: LocalDateTime
}

type LectureHomeWorkDto {
  id: ID
  subject: String
  description: String
  creationDate: LocalDateTime
  modificationDate: LocalDateTime
}

type LectureHomeWorksDto {
  items: [LectureHomeWorkDto]
  totalElements: Long
  totalPages: Int
}

type StudentHomeWorkDto {
  id: ID
  lectureHomeWork: LectureHomeWorkDto
  status: StudentHomeWorkStatus
  answer: String
  student: UserInfoDto
  mentor: UserInfoDto
  resolution: String
  creationDate: LocalDateTime
  modificationDate: LocalDateTime
  startCheckingDate: LocalDateTime
  endCheckingDate: LocalDateTime
}

type StudentHomeWorksDto {
  items: [StudentHomeWorkDto]
  totalElements: Long
  totalPages: Int
}

type TrainingsDto {
  items: [TrainingDto]
  totalElements: Long
  totalPages: Int
}

type TrainingTariffsDto {
  items: [TrainingTariffDto]
  totalElements: Long
  totalPages: Int
}

type ContentFileDto {
  id: ID
  size: Long
  type: String
  name: String
  fileLocation: String
}

input UserIdInput {
  id: ID
}

type UserDto {
  id: ID
  email: String
  roles: [UserRole]
}

type UserRoleDto {
  name: String
  description: String
}

type UsersDto {
  items: [UserInfoDto]
  totalElements: Long
  totalPages: Int
}

type UserInfoDto {
  id: ID
  email: String
  roles: [UserRole]
  person: PersonDto
}

type PersonDto {
  id: ID
  firstName: String
  lastName: String
  middleName: String
  avatarLocation: String
  phoneNumber: String
}

input PersonInput {
  firstName: String!
  lastName: String!
  middleName: String
  phoneNumber: String!
}

input UserSort {
  field: UserSortField
  order: Order
}

enum TechStack {
  JAVA
  PYTHON
}

enum UserRole {
  ADMIN
  USER
  MANAGER
  MASTER
  MENTOR
  LECTOR
}

enum Order {
  ASC
  DESC
}

enum UserSortField {
  LAST_NAME
  PHONE
  EMAIL
}

enum StudentHomeWorkStatus {
  NEW
  IN_REVIEW
  APPROVED
  NOT_APPROVED
}

input LectureSort {
  field: LectureSortField
  order: Order
}

input StudentHomeWorkSort {
  field: StudentHomeWorkSortField
  order: Order
}

input HomeWorkSort {
  field: HomeWorkSortField
  order: Order
}

input TrainingSort {
  field: TrainingSortField
  order: Order
}

input TrainingTariffSort {
  field: TrainingTariffField
  order: Order
}

enum LectureSortField {
  SUBJECT
  CREATION_DATE
}

enum HomeWorkSortField {
  SUBJECT
  CREATION_DATE
}

enum StudentHomeWorkSortField {
  MENTOR
  STUDENT
  STATE
  CREATION_DATE
}

enum TrainingSortField {
  NAME
  CREATION_DATE
}

enum TrainingTariffField {
  NAME
  CODE
  CREATION_DATE
}

scalar BigDecimal @javaType(name: "java.math.BigDecimal")

scalar BigInteger @javaType(name: "java.math.BigInteger")

scalar Date @javaType(name: "java.time.LocalDate")

scalar DateTime @javaType(name: "java.time.OffsetDateTime")

scalar LocalDateTime @javaType(name: "java.time.LocalDateTime")

scalar LocalTime @javaType(name: "java.time.LocalTime")

scalar Long @javaType(name: "java.lang.Long")

scalar Time @javaType(name: "java.time.OffsetTime")

scalar Timestamp @javaType(name: "java.util.Date")

scalar Url @javaType(name: "java.net.URL")

scalar Void @javaType(name: "java.lang.Void")
