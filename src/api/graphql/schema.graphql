# This file was generated. Do not edit manually.

schema {
    query: Query
    mutation: Mutation
}

directive @javaType(name: String!) on SCALAR

type CommentHomeWorkDto {
    children: [CommentHomeWorkDto]
    content: String
    creationDate: LocalDateTime
    creator: UserDto
    homeWork: StudentHomeWorkDto
    id: ID
}

type CommentHomeWorksDto {
    items: [CommentHomeWorkDto]
    limit: Int
    offset: Int
    totalElements: Long
}

type ContentFileDto {
    fileLocation: String
    id: ID
    name: String
    size: Long
    type: String
}

type HomeWorksStatisticDto {
    count: Long
    status: StudentHomeWorkStatus
}

type LectureContentDto {
    type: String
    url: String
    value: String
}

type LectureContentHomeWorkDto {
    type: String
    url: String
    value: String
}

type LectureDto {
    creationDate: LocalDateTime
    description: [String]
    homeWorkLevel: LectureHomeWorkLevelDto
    id: ID
    modificationDate: LocalDateTime
    speakers: [UserDto]
    subject: String
}

type LectureHomeWorkLevelDto {
    code: String
    description: String
    estimate: Int
    id: ID
}

type LectureInfoDto {
    content: [LectureContentDto]
    contentHomeWork: [LectureContentHomeWorkDto]
    creationDate: LocalDateTime
    description: [String]
    homeWorkLevel: LectureHomeWorkLevelDto
    id: ID
    modificationDate: LocalDateTime
    speakers: [UserDto]
    subject: String
}

type LectureInfoShortDto {
    content: [LectureContentDto]
    creationDate: LocalDateTime
    description: [String]
    homeWorkLevel: LectureHomeWorkLevelDto
    id: ID
    modificationDate: LocalDateTime
    speakers: [UserDto]
    subject: String
}

type LecturesDto {
    items: [LectureDto]
    limit: Int
    offset: Int
    totalElements: Long
}

"Mutation root"
type Mutation {
    answerComment(content: String!, parentID: ID!): CommentHomeWorkDto
    approved(homeWorkId: ID!): StudentHomeWorkDto
    changePassword(newPassword: String!, oldPassword: String!): Void
    changePasswordByUserId(password: String!, userId: ID!): Void
    createSkill(name: String!): SkillDto
    "user section"
    createUser(input: UserCreateInput!): UserDto
    deleteComment(id: ID!): Void
    deleteHomeWork(id: ID!): Void
    deleteLecture(id: ID!): Void
    deleteLectureHomeWorkLevel(id: ID!): Void
    deleteSkill(id: ID!): Void
    deleteTraining(id: ID!): Void
    deleteTrainingTariff(id: ID!): Void
    lockUser(id: ID!): Void
    notApproved(homeWorkId: ID!): StudentHomeWorkDto
    resetPassword(email: String!): Void
    resetState(homeWorkId: ID!): StudentHomeWorkDto
    "commentHomeWork section"
    sendComment(content: String!, homeWorkId: ID!): CommentHomeWorkDto
    "studentHomeWork section"
    sendHomeWorkToCheck(content: String!, lectureId: ID!, trainingId: ID!): StudentHomeWorkDto
    setPassword(newPassword: String!, token: String!): Void
    takeForReview(homeWorkId: ID!): StudentHomeWorkDto
    unlockUser(id: ID!): Void
    updateComment(content: String!, id: ID!): CommentHomeWorkDto
    updateHomeWork(content: String!, id: ID!): StudentHomeWorkDto
    "lecture section"
    updateLecture(input: LectureInput!): LectureInfoDto
    "lecture home work level section"
    updateLectureHomeWorkLevel(input: LectureHomeWorkLevelInput!): LectureHomeWorkLevelDto
    updateRole(id: ID!, roles: [UserRole]): UserDto
    updateSkill(id: ID!, name: String!): SkillDto
    "training section"
    updateTraining(input: TrainingInput!): TrainingDto
    "training lecture"
    updateTrainingLecture(id: ID!, lectureIds: [ID!]): [TrainingLectureDto]
    "training purchase section"
    updateTrainingPurchase(input: TrainingPurchaseInput!): TrainingPurchaseDto
    "training tariff"
    updateTrainingTariff(input: TrainingTariffInput!): TrainingTariffDto
    updateUser(input: UserUpdateInput!): UserDto
}

"Query root"
type Query {
    checkResetPasswordToken(token: String!): Void
    "commentHomeWork section"
    commentHomeWorkById(id: ID!): CommentHomeWorksDto
    commentsHomeWorkByHomeWork(homeWorkId: ID!, limit: Int!, offset: Int!, sort: CommentHomeWorkSort): CommentHomeWorksDto
    "studentHomeWork section"
    homeWork(id: ID!): StudentHomeWorkDto
    homeWorkByLectureAndTraining(lectureId: ID!, trainingId: ID!): StudentHomeWorkDto
    homeWorkByStudentAndLectureAndTraining(lectureId: ID!, studentId: ID!, trainingId: ID!): StudentHomeWorkDto
    homeWorks(filter: StudentHomeWorkFilter, limit: Int!, offset: Int!, sort: StudentHomeWorkSort): StudentHomeWorksDto
    homeWorksByLectureId(lectureId: ID!, limit: Int!, offset: Int!, sort: StudentHomeWorkSort): StudentHomeWorksDto
    homeWorksByStatus(limit: Int!, offset: Int!, sort: StudentHomeWorkSort, status: StudentHomeWorkStatus!): StudentHomeWorksDto
    homeWorksStatistic(id: ID): [HomeWorksStatisticDto]
    "lecture section"
    lecture(id: ID): LectureInfoShortDto
    lectureHomeWork(lectureId: ID): [LectureContentHomeWorkDto]
    "lecture home work level section"
    lectureHomeWorkLevel(id: ID!): LectureHomeWorkLevelDto
    lectureHomeWorkLevels: [LectureHomeWorkLevelDto]
    lectures(limit: Int!, offset: Int!, sort: LectureSort): LecturesDto
    mentors(limit: Int!, offset: Int!, sort: UserSort): UsersDto
    "rating"
    rating: RatingDto
    ratingByUser(id: ID): RatingDto
    skills(filter: SkillFilter, limit: Int!, offset: Int!, sort: SkillSort): SkillsDto
    "training section"
    training(id: ID!): TrainingDto
    "training lecture"
    trainingLectures(id: ID!): [TrainingLectureDto]
    "purchase section"
    trainingPurchases: [TrainingPurchaseDto]
    trainingPurchasesByUserId(userId: ID!): [TrainingPurchaseDto]
    "training tariff"
    trainingTariffs(limit: Int!, offset: Int!, sort: TrainingTariffSort): TrainingTariffsDto
    trainings(limit: Int!, offset: Int!, sort: TrainingSort): TrainingsDto
    trainingsByMentor(limit: Int!, offset: Int!, sort: TrainingSort): TrainingsDto
    "statistics section"
    trainingsHomeWorksStatistic(id: ID): [TrainingHomeWorksStatisticDto]
    "user section"
    user: UserDto
    userById(id: ID): UserDto
    userRoles: [UserRoleDto]
    users(filter: UsersFilter, limit: Int!, offset: Int!, sort: UserSort): UsersDto
    usersRating(limit: Int!, offset: Int!, sort: UserSort): UsersRatingDto
}

type RatingDto {
    products: [RatingProductsDto]
    rating: Long
}

type RatingProductsByRatingTypeDto {
    rating: Long
    type: RatingTypeDto
}

type RatingProductsByUserRoleDto {
    rating: Long
    role: UserRoleDto
    types: [RatingProductsByRatingTypeDto]
}

type RatingProductsDto {
    roles: [RatingProductsByUserRoleDto]
    training: TrainingDto
}

type RatingTypeDto {
    description: String
    name: String
}

type RatingUserDto {
    rating: Long
}

type SkillDto {
    id: ID
    name: String
}

type SkillsDto {
    items: [SkillDto]
    limit: Int
    offset: Int
    totalElements: Long
}

type StudentHomeWorkDto {
    answer: String
    creationDate: LocalDateTime
    endCheckingDate: LocalDateTime
    id: ID
    lecture: LectureInfoDto
    mentor: UserDto
    startCheckingDate: LocalDateTime
    status: StudentHomeWorkStatus
    student: UserDto
    training: TrainingDto
    updateDate: LocalDateTime
}

type StudentHomeWorksDto {
    items: [StudentHomeWorkDto]
    limit: Int
    offset: Int
    totalElements: Long
}

type TrainingDto {
    content: String
    description: String
    id: ID!
    mentors: [UserDto]
    name: String!
    picture: String
    tariffs: [TrainingTariffDto]
    techStack: TechStack!
}

type TrainingHomeWorksStatisticDto {
    homeworks: [HomeWorksStatisticDto]
    training: TrainingDto
}

type TrainingLectureDto {
    id: ID
    lastLecture: LectureDto
    lecture: LectureDto
    locking: Boolean
    number: Int
}

type TrainingPurchaseDto {
    id: ID
    trainingTariff: TrainingTariffDto!
    user: UserDto!
}

type TrainingTariffDto {
    code: String
    description: String
    homeWork: Boolean
    id: ID
    name: String
    price: Float
    training: TrainingDto
}

type TrainingTariffsDto {
    items: [TrainingTariffDto]
    limit: Int
    offset: Int
    totalElements: Long
}

type TrainingsDto {
    items: [TrainingDto]
    limit: Int
    offset: Int
    totalElements: Long
}

type UserDto {
    avatar: String
    confirmationDate: LocalDateTime
    creationDate: LocalDateTime
    email: String
    firstName: String
    git: String
    id: ID
    lastName: String
    linkedin: String
    locked: Boolean
    middleName: String
    phoneNumber: String
    rating: RatingUserDto
    roles: [UserRole]
    skills: [SkillDto]
    stackOverflow: String
    telegram: String
    updateDate: LocalDateTime
    vkId: String
    website: String
}

type UserRatingDto {
    avatar: String
    creationDate: LocalDateTime
    firstName: String
    id: ID
    lastName: String
    middleName: String
    rating: RatingUserDto
}

type UserRoleDto {
    description: String
    name: String
}

type UsersDto {
    items: [UserDto]
    limit: Int
    offset: Int
    totalElements: Long
}

type UsersRatingDto {
    items: [UserRatingDto]
    limit: Int
    offset: Int
    totalElements: Long
}

enum CommentHomeWorkSortField {
    CREATION_DATE
    CREATOR
}

enum LectureSortField {
    CREATION_DATE
    SUBJECT
}

enum Order {
    ASC
    DESC
}

enum SkillSortField {
    NAME
}

enum StudentHomeWorkSortField {
    CREATION_DATE
    END_CHECKING_DATE
    MENTOR
    START_CHECKING_DATE
    STATE
    STUDENT
}

enum StudentHomeWorkStatus {
    APPROVED
    IN_REVIEW
    NEW
    NOT_APPROVED
}

enum TechStack {
    JAVA
    PYTHON
}

enum TrainingSortField {
    CREATION_DATE
    NAME
}

enum TrainingTariffField {
    CODE
    CREATION_DATE
    NAME
}

enum UserRole {
    ADMIN
    LECTOR
    MANAGER
    MASTER
    MENTOR
    STUDENT
}

enum UserSortField {
    EMAIL
    LAST_NAME
    PHONE
    RATING
}

"An arbitrary precision signed decimal"
scalar BigDecimal

"An arbitrary precision signed integer"
scalar BigInteger

"An RFC-3339 compliant Full Date Scalar"
scalar Date

"An RFC-3339 compliant DateTime Scalar"
scalar DateTime

"A local datetime string in 'full-date\"T\"partial-time' format RFC3339"
scalar LocalDateTime

"A local time string in 24-hr HH:mm[:ss[.SSS]] format"
scalar LocalTime

"A 64-bit signed integer"
scalar Long

"An RFC-3339 compliant Full Time Scalar"
scalar Time

"A number of milliseconds from start of UNIX epoch"
scalar Timestamp

"A Url scalar"
scalar Url

"Void"
scalar Void

input CommentHomeWorkSort {
    field: CommentHomeWorkSortField
    order: Order
}

input LectureContentHomeWorkInput {
    type: String
    url: String
    value: String
}

input LectureContentInput {
    type: String
    url: String
    value: String
}

input LectureHomeWorkLevelInput {
    code: String
    description: String
    estimate: Int
    id: ID
}

input LectureInput {
    content: [LectureContentInput]
    contentHomeWork: [LectureContentHomeWorkInput]
    description: [String]
    homeWorkLevelCode: String
    id: ID
    speakers: [String]
    subject: String
}

input LectureSort {
    field: LectureSortField
    order: Order
}

input SkillFilter {
    name: String
}

input SkillSort {
    field: SkillSortField
    order: Order
}

input StudentHomeWorkFilter {
    creationDateFrom: LocalDateTime
    creationDateTo: LocalDateTime
    lectureId: ID
    mentorId: ID
    status: StudentHomeWorkStatus
    trainingId: ID
}

input StudentHomeWorkSort {
    field: StudentHomeWorkSortField
    order: Order
}

input TrainingInput {
    content: String
    description: String
    id: ID
    mentors: [String]
    name: String
    techStack: TechStack!
}

input TrainingLectureInput {
    lastLecture: ID
    lecture: ID!
    locking: Boolean
}

input TrainingPurchaseInput {
    id: ID
    trainingTariffCode: String
    userEmail: String
}

input TrainingSort {
    field: TrainingSortField
    order: Order
}

input TrainingTariffInput {
    code: String
    description: String
    homeWork: Boolean
    id: ID
    name: String
    price: Float
    trainingName: String
}

input TrainingTariffSort {
    field: TrainingTariffField
    order: Order
}

input UserCreateInput {
    email: String!
    firstName: String!
    id: ID
    lastName: String!
    middleName: String
    password: String!
    phoneNumber: String
}

input UserSort {
    field: UserSortField
    order: Order
}

input UserUpdateInput {
    email: String!
    firstName: String!
    git: String
    id: ID
    lastName: String!
    linkedin: String
    middleName: String
    phoneNumber: String
    skills: [ID]
    stackOverflow: String
    telegram: String
    vkId: String
    website: String
}

input UsersFilter {
    email: String
    firstName: String
    phoneNumber: String
}
